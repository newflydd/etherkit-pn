
#ifndef eddp_hwf_H                       /* ----- reinclude-protection ----- */
#define eddp_hwf_H

#ifdef __cplusplus                       /* If C++ - compiler: Use C linkage */
extern "C"
{
#endif

/*****************************************************************************/
/*  Copyright (C) 2020 Siemens Aktiengesellschaft. All rights reserved.      */
/*****************************************************************************/
/*  This program is protected by German copyright law and international      */
/*  treaties. The use of this software including but not limited to its      */
/*  Source Code is subject to restrictions as agreed in the license          */
/*  agreement between you and Siemens.                                       */
/*  Copying or distribution is not allowed unless expressly permitted        */
/*  according to your license agreement with Siemens.                        */
/*****************************************************************************/
/*                                                                           */
/*  P r o j e c t         &P: PROFINET IO Runtime Software              :P&  */
/*                                                                           */
/*  P a c k a g e         &W: PROFINET IO Runtime Software              :W&  */
/*                                                                           */
/*  C o m p o n e n t     &C: EDDP (EthernetDeviceDriver for PN-IP)     :C&  */
/*                                                                           */
/*  F i l e               &F: eddp_hwf.h                                :F&  */
/*                                                                           */
/*  V e r s i o n         &V: BC_PNRUN_P07.02.00.00_00.02.00.20         :V&  */
/*                                                                           */
/*  D a t e  (YYYY-MM-DD) &D: 2020-09-21                                :D&  */
/*                                                                           */
/*****************************************************************************/
/*                                                                           */
/*  D e s c r i p t i o n:                                                   */
/*                                                                           */
/*                                                                           */
/*****************************************************************************/
/*                                                                           */
/*  H i s t o r y :                                                          */
/*  ________________________________________________________________________ */
/*                                                                           */
/*  Date        Who   What                                                   */
#ifdef EDDP_MESSAGE
/*  xx.xx.xx    xx    initial version.                                       */
/*  generated by: HwFilterCompiler.exe, V1.00.1C                             */
#endif
/*****************************************************************************/
         
                                   
/*===========================================================================*/
/*                              constants                                    */
/*===========================================================================*/


/*===========================================================================*/
/*                                 defines                                   */
/*===========================================================================*/

// !!! ATTENTION: special development filter code for DCP/Hello and ARP !!!

#define RING_K32_SYNC_CLOCK 0x1D                      // ; 0 for NRT dump / 29 for K32
#define RING_K32_SYNC_TIME 0x1E                       // ; 0 for NRT dump / 30 for K32
#define RING_K32_SYNC_DELAY 0x1F                      // ; 0 for NRT dump / 31 for K32

// ********************************************************************************
// * example for API-Ctrl memory structure:                                       *
// * ======================================                                       *
// * 0x0000: this Filtercode --> (IFA/B) less than 1280byte --> 0x600             *
// * 0x0600: TX/RX DMACW IFA --> RX:32*8Byte, TX:16*8Byte   --> 0x180             *
// * 0x0780: Store_MEM_IFA   --> max. 8 data words to store/use by idx on IFA     *
// * 0x0790: SDT IFA         --> max 80 items (a 4 byte) by idx in StringDescrTbl *
// * 0x08D0: TX/RX DMACW IFB --> RX:32*8Byte, TX:16*8Byte   --> 0x180             *
// * 0x0A50: Store_MEM_IFB   --> max. 8 data words to store/use by idx on IFB     *
// * 0x0A60: SDT IFB         --> max 80 items (a 4 byte) by idx in StringDescrTbl *
// * 0x0BE0: Strings IFA/B   --> space for compare strings from SDT (build by FW) *
// ********************************************************************************
#define EDDP_HW_FILTER_MEM_OFFS 0x680                 // ; define used for size of HWCode incl. reserved space
#define EDDP_HW_FILTER_MEM_SIZE 0x10                  // ; Store_MEM_IFA/B: memory space to store data words from received frame eg: EDDP_MEM_IDX_SPA_SAVE1

// ********************************************************************************
// ********************************************************************************
#define HWF_ETH_DA_SA 0x6                             // ; 6*2=12 DA(6), SA(6)  --> points to VLAN or EtherType
#define HWF_VLAN_TYPE 0x8100                          // ; only VLAN-Type (WORD)
#define HWF_VLAN_SKIP 0x2                             // ; skip VLAN-Type + VLAN-ID (LONG)

// ***IDX in StringDescrTable *****************************************************
// ********************************************************************************
#define EDDP_SDT_IDX_DCP_01TYPE 0x0                   // ; SDT idx 0	TYPE for fast prescan only
#define EDDP_SDT_IDX_DCP_01TLV 0x1                    // ; SDT idx 1	complete string
#define EDDP_SDT_IDX_DCP_02TYPE 0x2                   // ; SDT idx 2	TYPE for fast prescan only
#define EDDP_SDT_IDX_DCP_02TLV 0x3                    // ; SDT idx 3	complete string
#define EDDP_SDT_IDX_DCP_03TYPE 0x4                   // ; SDT idx 4	TYPE for fast prescan only
#define EDDP_SDT_IDX_DCP_03TLV 0x5                    // ; SDT idx 5	complete string
#define EDDP_SDT_IDX_DCP_04TYPE 0x6                   // ; SDT idx 6	TYPE for fast prescan only
#define EDDP_SDT_IDX_DCP_04TLV 0x7                    // ; SDT idx 7	complete string
#define EDDP_SDT_IDX_DCP_05TYPE 0x8                   // ; SDT idx 8	TYPE for fast prescan only
#define EDDP_SDT_IDX_DCP_05TLV 0x9                    // ; SDT idx 9	complete string
#define EDDP_SDT_IDX_DCP_MIN 0x0                      // ; min SDT idx for DCP
#define EDDP_SDT_IDX_DCP_MAX 0x9                      // ; max SDT idx for DCP
// ********************************************************************************
#define EDDP_SDT_IDX_DCP_HELLO_01_LEN 0xA             // ; SDT idx 10	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_01TLV 0xB              // ; SDT idx 11
#define EDDP_SDT_IDX_DCP_HELLO_02_LEN 0xC             // ; SDT idx 12	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_02TLV 0xD              // ; SDT idx 13
#define EDDP_SDT_IDX_DCP_HELLO_03_LEN 0xE             // ; SDT idx 14	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_03TLV 0xF              // ; SDT idx 15
#define EDDP_SDT_IDX_DCP_HELLO_04_LEN 0x10            // ; SDT idx 16	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_04TLV 0x11             // ; SDT idx 17
#define EDDP_SDT_IDX_DCP_HELLO_05_LEN 0x12            // ; SDT idx 18	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_05TLV 0x13             // ; SDT idx 19
#define EDDP_SDT_IDX_DCP_HELLO_06_LEN 0x14            // ; SDT idx 20	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_06TLV 0x15             // ; SDT idx 21
#define EDDP_SDT_IDX_DCP_HELLO_07_LEN 0x16            // ; SDT idx 22	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_07TLV 0x17             // ; SDT idx 23
#define EDDP_SDT_IDX_DCP_HELLO_08_LEN 0x18            // ; SDT idx 24	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_08TLV 0x19             // ; SDT idx 25
#define EDDP_SDT_IDX_DCP_HELLO_09_LEN 0x1A            // ; SDT idx 26	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_09TLV 0x1B             // ; SDT idx 27
#define EDDP_SDT_IDX_DCP_HELLO_10_LEN 0x1C            // ; SDT idx 28	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_10TLV 0x1D             // ; SDT idx 29
#define EDDP_SDT_IDX_DCP_HELLO_11_LEN 0x1E            // ; SDT idx 30	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_11TLV 0x1F             // ; SDT idx 31
#define EDDP_SDT_IDX_DCP_HELLO_12_LEN 0x20            // ; SDT idx 32	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_12TLV 0x21             // ; SDT idx 33
#define EDDP_SDT_IDX_DCP_HELLO_13_LEN 0x22            // ; SDT idx 34	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_13TLV 0x23             // ; SDT idx 35
#define EDDP_SDT_IDX_DCP_HELLO_14_LEN 0x24            // ; SDT idx 36	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_14TLV 0x25             // ; SDT idx 37
#define EDDP_SDT_IDX_DCP_HELLO_15_LEN 0x26            // ; SDT idx 38	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_15TLV 0x27             // ; SDT idx 39
#define EDDP_SDT_IDX_DCP_HELLO_16_LEN 0x28            // ; SDT idx 40	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_16TLV 0x29             // ; SDT idx 41
#define EDDP_SDT_IDX_DCP_HELLO_17_LEN 0x2A            // ; SDT idx 42	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_17TLV 0x2B             // ; SDT idx 43
#define EDDP_SDT_IDX_DCP_HELLO_18_LEN 0x2C            // ; SDT idx 44	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_18TLV 0x2D             // ; SDT idx 45
#define EDDP_SDT_IDX_DCP_HELLO_19_LEN 0x2E            // ; SDT idx 46	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_19TLV 0x2F             // ; SDT idx 47
#define EDDP_SDT_IDX_DCP_HELLO_20_LEN 0x30            // ; SDT idx 48	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_20TLV 0x31             // ; SDT idx 49
#define EDDP_SDT_IDX_DCP_HELLO_21_LEN 0x32            // ; SDT idx 50	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_21TLV 0x33             // ; SDT idx 51
#define EDDP_SDT_IDX_DCP_HELLO_22_LEN 0x34            // ; SDT idx 52	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_22TLV 0x35             // ; SDT idx 53
#define EDDP_SDT_IDX_DCP_HELLO_23_LEN 0x36            // ; SDT idx 54	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_23TLV 0x37             // ; SDT idx 55
#define EDDP_SDT_IDX_DCP_HELLO_24_LEN 0x38            // ; SDT idx 56	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_24TLV 0x39             // ; SDT idx 57
#define EDDP_SDT_IDX_DCP_HELLO_25_LEN 0x3A            // ; SDT idx 58	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_25TLV 0x3B             // ; SDT idx 59
#define EDDP_SDT_IDX_DCP_HELLO_26_LEN 0x3C            // ; SDT idx 60	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_26TLV 0x3D             // ; SDT idx 61
#define EDDP_SDT_IDX_DCP_HELLO_27_LEN 0x3E            // ; SDT idx 62	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_27TLV 0x3F             // ; SDT idx 63
#define EDDP_SDT_IDX_DCP_HELLO_28_LEN 0x40            // ; SDT idx 64	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_28TLV 0x41             // ; SDT idx 65
#define EDDP_SDT_IDX_DCP_HELLO_29_LEN 0x42            // ; SDT idx 66	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_29TLV 0x43             // ; SDT idx 67
#define EDDP_SDT_IDX_DCP_HELLO_30_LEN 0x44            // ; SDT idx 68	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_30TLV 0x45             // ; SDT idx 69
#define EDDP_SDT_IDX_DCP_HELLO_31_LEN 0x46            // ; SDT idx 70	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_31TLV 0x47             // ; SDT idx 71
#define EDDP_SDT_IDX_DCP_HELLO_32_LEN 0x48            // ; SDT idx 72	LEN for fast prescan only
#define EDDP_SDT_IDX_DCP_HELLO_32TLV 0x49             // ; SDT idx 73
#define EDDP_SDT_IDX_DCP_HELLO_MIN 0xA                // ; min SDT idx for DCP_HELLO
#define EDDP_SDT_IDX_DCP_HELLO_MAX 0x49               // ; max SDT idx for DCP_HELLO
// ********************************************************************************
#define EDDP_SDT_IDX_ARP_IP 0x4A                      // ; SDT idx 74
#define EDDP_SDT_IDX_ARP_IP_MIN 0x4A                  // ; min SDT idx for ARP_IP
#define EDDP_SDT_IDX_ARP_IP_MAX 0x4A                  // ; max SDT idx for ARP_IP
// ********************************************************************************
#define EDDP_SDT_IDX_LAST_USED 0x4A                   // ; idx 0..74 used in SDT IFA/B
#define EDDP_SDT_IDX_MAX_POS 0x4F                     // ; idx 76..79 for future use
// ********************************************************************************
#define EDDP_SDT_SIZE 0x140                           // ; 80 entries x 4byte ==>  4 free for future use
// ********************************************************************************

// *** FDC for Drop, Pass, Cyclic *************************************************
// ********************************************************************************
// * 0 reserved for undef !!!
// * bit   :  15=/Drop  14-10(tbd)  9-4(grp)    3-0(sub)
// ********************************************************************************
#define EDDP_HWF_FDC_DROP_MASK 0x8000                 // ; 0=accept, 1=drop
#define EDDP_HWF_FDC_GRP_MASK 0x3F0                   // ; mask for FDC group --> same with RX ring index
#define EDDP_HWF_FDC_SUB_GRP_MASK 0xF                 // ; mask for FDC sub group
// ********************************************************************************
#define EDDP_HWF_FDC_OTHER_GRP 0x0
#define EDDP_HWF_FDC_OTHER_DROP 0x8000                // ; 1000.0000.0000.0000: FilterDecisionCode for OTHER drop
#define EDDP_HWF_FDC_OTHER 0x0                        // ; 0000.0000.0000.0000: FilterDecisionCode for OTHER (not used)
// ********************************************************************************
#define EDDP_HWF_FDC_IP_UDP_GRP 0x10
#define EDDP_HWF_FDC_IP_UDP_DROP 0x8010               // ; 1000.0000.0001.0000: FilterDecisionCode for IP drop
#define EDDP_HWF_FDC_IP_ICMP 0x10                     // ; 0000.0000.0001.0000: FilterDecisionCode for IP_ICMP
#define EDDP_HWF_FDC_IP_IGMP 0x11                     // ; 0000.0000.0001.0001: FilterDecisionCode for IP_IGMP (not used)
#define EDDP_HWF_FDC_IP_TCP 0x12                      // ; 0000.0000.0001.0010: FilterDecisionCode for IP_TCP
#define EDDP_HWF_FDC_IP_UDP 0x13                      // ; 0000.0000.0001.0011: FilterDecisionCode for IP_UDP
#define EDDP_HWF_FDC_IP_OTHER 0x14                    // ; 0000.0000.0001.0100: FilterDecisionCode for IP_OTHER (not used)
#define EDDP_HWF_FDC_UDP_DCP 0x15                     // ; 0000.0000.0001.0101: FilterDecisionCode for UDP_DCP
#define EDDP_HWF_FDC_UDP_DCP_HELLO 0x16               // ; 0000.0000.0001.0110: FilterDecisionCode for UDP_DCP_HELLO
#define EDDP_HWF_FDC_UDP_ASRT 0x17                    // ; 0000.0000.0001.0111: FilterDecisionCode for UDP_ASRT
// ********************************************************************************
#define EDDP_HWF_FDC_ARP_GRP 0x20
#define EDDP_HWF_FDC_ARP_DROP 0x8020                  // ; 1000.0000.0010.0000: FilterDecisionCode for ARP drop
#define EDDP_HWF_FDC_ARP 0x20                         // ; 0000.0000.0010.0000: FilterDecisionCode for ARP pass
// ********************************************************************************
#define EDDP_HWF_FDC_MRP_GRP 0x30
#define EDDP_HWF_FDC_MRP_DROP 0x8030                  // ; 1000.0000.0011.0000: FilterDecisionCode for MRP drop
#define EDDP_HWF_FDC_MRP 0x30                         // ; 0000.0000.0011.0000: FilterDecisionCode for MRP pass
// ********************************************************************************
#define EDDP_HWF_FDC_LLDP_GRP 0x40
#define EDDP_HWF_FDC_LLDP 0x40                        // ; 0000.0000.0100.0000: FilterDecisionCode for LLDP pass
// ********************************************************************************
#define EDDP_HWF_FDC_DCP_GRP 0x50
#define EDDP_HWF_FDC_DCP_DROP 0x8050                  // ; 1000.0000.0101.0000: FilterDecisionCode for DCP drop
#define EDDP_HWF_FDC_DCP 0x50                         // ; 0000.0000.0101.0000: FilterDecisionCode for DCP
#define EDDP_HWF_FDC_DCP_HELLO 0x51                   // ; 0000.0000.0101.0001: FilterDecisionCode for DCP_HELLO, HelloFilter 1 
#define EDDP_HWF_FDC_DCP_HELLO2 0x451                 // ; 0000.0100.0101.0010: FilterDecisionCode for DCP_HELLO, HelloFilter 2 
#define EDDP_HWF_FDC_DCP_HELLO3 0x851                 // ; 0000.1000.0101.0011: FilterDecisionCode for DCP_HELLO, HelloFilter 3 
#define EDDP_HWF_FDC_DCP_HELLO4 0xC51                 // ; 0000.1100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 4 
#define EDDP_HWF_FDC_DCP_HELLO5 0x1051                // ; 0001.0000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 5
#define EDDP_HWF_FDC_DCP_HELLO6 0x1451                // ; 0001.0100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 6 
#define EDDP_HWF_FDC_DCP_HELLO7 0x1851                // ; 0001.1000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 7
#define EDDP_HWF_FDC_DCP_HELLO8 0x1C51                // ; 0001.1100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 8 
#define EDDP_HWF_FDC_DCP_HELLO9 0x2051                // ; 0010.0000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 9 
#define EDDP_HWF_FDC_DCP_HELLO10 0x2451               // ; 0010.0100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 10 
#define EDDP_HWF_FDC_DCP_HELLO11 0x2851               // ; 0010.1000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 11 
#define EDDP_HWF_FDC_DCP_HELLO12 0x2C51               // ; 0010.1100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 12 
#define EDDP_HWF_FDC_DCP_HELLO13 0x3051               // ; 0011.0000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 13 
#define EDDP_HWF_FDC_DCP_HELLO14 0x3451               // ; 0011.0100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 14 
#define EDDP_HWF_FDC_DCP_HELLO15 0x3851               // ; 0011.1000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 15 
#define EDDP_HWF_FDC_DCP_HELLO16 0x3C51               // ; 0011.1100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 16 
#define EDDP_HWF_FDC_DCP_HELLO17 0x4051               // ; 0100.0000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 17 
#define EDDP_HWF_FDC_DCP_HELLO18 0x4451               // ; 0100.0100.0101.0010: FilterDecisionCode for DCP_HELLO, HelloFilter 18 
#define EDDP_HWF_FDC_DCP_HELLO19 0x4851               // ; 0100.1000.0101.0011: FilterDecisionCode for DCP_HELLO, HelloFilter 19 
#define EDDP_HWF_FDC_DCP_HELLO20 0x4C51               // ; 0100.1100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 20 
#define EDDP_HWF_FDC_DCP_HELLO21 0x5051               // ; 0101.0000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 21
#define EDDP_HWF_FDC_DCP_HELLO22 0x5451               // ; 0101.0100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 22 
#define EDDP_HWF_FDC_DCP_HELLO23 0x5851               // ; 0101.1000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 23
#define EDDP_HWF_FDC_DCP_HELLO24 0x5C51               // ; 0101.1100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 24 
#define EDDP_HWF_FDC_DCP_HELLO25 0x6051               // ; 0110.0000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 25
#define EDDP_HWF_FDC_DCP_HELLO26 0x6451               // ; 0110.0100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 26
#define EDDP_HWF_FDC_DCP_HELLO27 0x6851               // ; 0110.1000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 27 
#define EDDP_HWF_FDC_DCP_HELLO28 0x6C51               // ; 0110.1100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 28 
#define EDDP_HWF_FDC_DCP_HELLO29 0x7051               // ; 0111.0000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 29 
#define EDDP_HWF_FDC_DCP_HELLO30 0x7451               // ; 0111.0100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 30 
#define EDDP_HWF_FDC_DCP_HELLO31 0x7851               // ; 0111.1000.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 31 
#define EDDP_HWF_FDC_DCP_HELLO32 0x7C51               // ; 0111.1100.0101.0100: FilterDecisionCode for DCP_HELLO, HelloFilter 32 
// ********************************************************************************
#define EDDP_HWF_FDC_ASRT_GRP 0x60
#define EDDP_HWF_FDC_ASRT 0x60                        // ; 0000.0000.0110.0000: FilterDecisionCode for ASRT pass (AlarmSoftRealTime)
// ********************************************************************************
#define EDDP_HWF_FDC_LEN_GRP 0x70
#define EDDP_HWF_FDC_LEN_DROP 0x8070                  // ; 1000.0000.0111.0000: FilterDecisionCode for LEN drop
#define EDDP_HWF_FDC_LEN_DCP 0x70                     // ; 0000.0000.0111.0000: FilterDecisionCode for LEN_DCP
#define EDDP_HWF_FDC_LEN_TSYNC 0x71                   // ; 0000.0000.0111.0001: FilterDecisionCode for LEN_TSYNC
#define EDDP_HWF_FDC_LEN_STDBY 0x72                   // ; 0000.0000.0111.0010: FilterDecisionCode for LEN_STDBY
#define EDDP_HWF_FDC_LEN_HSR 0x73                     // ; 0000.0000.0111.0011: FilterDecisionCode for LEN_HSR SNAP header
#define EDDP_HWF_FDC_LEN_SINEC_FWL 0x74               // ; 0000.0000.0111.0100: FilterDecisionCode for LEN_SINEC_FWL SNAP header
#define EDDP_HWF_FDC_LEN_OTHER 0x75                   // ; 0000.0000.0111.0101: FilterDecisionCode for LEN_OTHER (not used)
// ********************************************************************************
#define EDDP_HWF_FDC_PTCP_GRP 0x80
#define EDDP_HWF_FDC_PTCP_DROP 0x8080                 // ; 1000.0000.1000.0000: EDDP FilterDecisionCode for PTCP drop
#define EDDP_HWF_FDC_PTCP_ANNOUNCE 0x80               // ; 0000.0000.1000.0000: EDDP FilterDecisionCode for PTCP_ANNOUNCE
#define EDDP_HWF_FDC_PTCP_K32_SYNC_0 0x81             // ; 0000.0000.1000.0001: K32  FilterDecisionCode for PTCP_SYNC Clock 
#define EDDP_HWF_FDC_PTCP_K32_SYNC_1 0x82             // ; 0000.0000.1000.0010: K32  FilterDecisionCode for PTCP_SYNC Time
#define EDDP_HWF_FDC_PTCP_K32_DELAY 0x83              // ; 0000.0000.1000.0011: K32  FilterDecisionCode for PTCP_DELAY
#define EDDP_HWF_FDC_PTCP_K32_SNC_0_FU 0x84           // ; 0000.0000.1000.0100: K32  FilterDecisionCode for Sync0 Follow Up Frames
#define EDDP_HWF_FDC_PTCP_K32_SNC_1_FU 0x85           // ; 0000.0000.1000.0101: K32  FilterDecisionCode for Sync1 Follow Up Frames
#define EDDP_HWF_FDC_K32_RESERVED_2 0x86              // ; 0000.0000.1000.0101: K32  FilterDecisionCode, reserved for gPTP (not used in K32)
// ********************************************************************************
#define EDDP_HWF_FDC_RT_CT_GRP 0xE0
#define EDDP_HWF_FDC_RT_CT_DROP 0x80E0                // ; 1000.0000.1110.0000: FilterDecisionCode for RT_CT drop
// ********************************************************************************
#define EDDP_HWF_FDC_RT_SF_GRP 0xF0
#define EDDP_HWF_FDC_RT_SF_DROP 0x80F0                // ; 1000.0000.1111.0000: FilterDecisionCode for RT_SF drop
// ********************************************************************************
#define EDDP_HWF_FDC_INVALID 0xFFFF                   // ; reserved for initialization of FDC field for debuging/testing/ect...

// *** AcyclicRead-IDX for PASS (DROP in monitor mode) ****************************
// *** CYCLE puts frame into ACW list without FDC,IDX  ****************************
// ********************************************************************************
#define EDDP_HWF_ARD_INDEX_DROP 0x0                   // ; DMA-CW Idx for DROP
#define EDDP_HWF_ARD_INDEX_OTHER 0x1                  // ; DMA-CW Idx for ?_OTHER
#define EDDP_HWF_ARD_INDEX_IP_MISC 0x2                // ; DMA-CW Idx for IP:    ARP
#define EDDP_HWF_ARD_INDEX_IP_TCP 0x3                 // ; DMA-CW Idx for IP:    TCP
#define EDDP_HWF_ARD_INDEX_IP_UDP 0x4                 // ; DMA-CW Idx for IP:    UDP
#define EDDP_HWF_ARD_INDEX_ALARM 0x5                  // ; DMA-CW Idx for ALARM: ASRT, UDP_ASRT
#define EDDP_HWF_ARD_INDEX_DCP 0x6                    // ; DMA-CW Idx for DCP:   DCP, DCP_HELLO , UDP_DCP, UDP_DCP_HELLO, LEN_DCP
#define EDDP_HWF_ARD_INDEX_PTCP_ANN 0x7               // ; DMA-CW Idx for PTCP?: PTCP_ANNOUNCE
#define EDDP_HWF_ARD_INDEX_LLDP 0x8                   // ; DMA-CW Idx for LLDP
#define EDDP_HWF_ARD_INDEX_MRP 0x9                    // ; DMA-CW Idx for MRP:   LEN_STDBY, LEN_HSR, MRP
#define EDDP_HWF_ARD_INDEX_MISC 0xA                   // ; DMA-CW Idx for TSYNC/FWL: ICMP, IGMP, LEN_TSYNC, LEN_SINEC_FWL 
#define EDDP_HWF_ARD_IDX_K32_SNC_CLOCK 0x1D           // ; DMA-CW Idx for PTCP?: KRISC SYNC_0 (PTCP clock sync)
#define EDDP_HWF_ARD_IDX_K32_SNC_TIME 0x1E            // ; DMA-CW Idx for PTCP?: KRISC SYNC_1 (gPTP time sync tbd)
#define EDDP_HWF_ARD_IDX_K32_SNC_DELAY 0x1F           // ; DMA-CW Idx for PTCP?: KRISC SYNC_DELAY
// ***** the PNIP supports 32 rings and next mask defines used rings **************
#define EDDP_HWF_ARD_HWF_USED_RINGS 0xE00007FF        // ; all RX-Rings used by this filter code
#define EDDP_HWF_ARD_K32_USED_RINGS 0xE0000000        // ; all RX-rings handled by KRISC used by EDDP_API_TYPE_PTCP
#define EDDP_HWF_ARD_NRT_USED_RINGS 0xE00007FF        // ; all RX-rings handled by NRT
// ***** the PNIP supports 16 filter programs, this mask defines used fragments ***
// ***** this define should be written into FILTERENABLED_IFx *********************
#define EDDP_HWF_OTHER_MASK 0x1                       // ; Mask for code fragment 00: OTHER
#define EDDP_HWF_IP_MASK 0x2                          // ; Mask for code fragment 01: IP
#define EDDP_HWF_ARP_MASK 0x4                         // ; Mask for code fragment 02: ARP
#define EDDP_HWF_MRP_MASK 0x8                         // ; Mask for code fragment 03: MRP
#define EDDP_HWF_LLDP_MASK 0x10                       // ; Mask for code fragment 04: LLDP
#define EDDP_HWF_PN_DCP_MASK 0x20                     // ; Mask for code fragment 05: PN_DCP
#define EDDP_HWF_ALARM_MASK 0x40                      // ; Mask for code fragment 06: ALARM
#define EDDP_HWF_LEN_MASK 0x80                        // ; Mask for code fragment 07: LEN
#define EDDP_HWF_PTCP_MASK 0x100                      // ; Mask for code fragment 08: PTCP
#define EDDP_HWF_CT_MASK 0x4000                       // ; Mask for code fragment 14: CT
#define EDDP_HWF_SF_MASK 0x8000                       // ; Mask for code fragment 15: SF
#define EDDP_HWF_ALL_CODE_MASK 0xC1FF                 // ; Mask for: OTHER, IP, ARP, MRP, LLDP, PN_DCP, ALARM, LEN, PTCP, CT, SF

// *** memory addr. calculated by ASIC with idx usage *****************************
// ********************************************************************************
// *** see EDDP_HW_FILTER_MEM_SIZE for reserved range: 0..7 ***********************
#define EDDP_MEM_IDX_SPA_SAVE1 0x0                    // ; WORD: Save Spa in memory space for later compare
#define EDDP_MEM_IDX_SPA_SAVE2 0x1                    // ; WORD: Save Spa in memory space for later compare

// ********************************************************************************
// **** Code Fragment 00 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_OTHER 0x0                       // ; Drop Filter !(EtherType: 0h-800h, 806h, 8892h, 88F7h, 88CCh, 88E3h)
#define EDDP_API_TYPE_OTHER_SIZE 0x8

// ********************************************************************************
// **** Code Fragment 01 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_IP 0x8                          // ; Filter for IP EtherType:0x0800
#define EDDP_API_TYPE_IP_SIZE 0x118

// ********************************************************************************
// **** Code Fragment 02 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_ARP 0x120                       // ; Filter for ARP EtherType:0x0806
#define EDDP_API_TYPE_ARP_SIZE 0x78

// ********************************************************************************
// **** Code Fragment 03 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_MRP 0x198                       // ; filter for mrp ethertype:0x88e3, DLR ethertype:0x80E1
#define EDDP_API_TYPE_MRP_SIZE 0x30

// ********************************************************************************
// **** Code Fragment 04 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_LLDP 0x1C8                      // ; Filter for LLDP EtherType:0x88CC
#define EDDP_API_TYPE_LLDP_SIZE 0x8

// ********************************************************************************
// **** Code Fragment 05 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_PN_DCP 0x1D0                    // ; Filter for DCP EtherType:0x8892
#define EDDP_API_TYPE_PN_DCP_SIZE 0x2D8

// ********************************************************************************
// **** Code Fragment 06 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_ALARM 0x4A8                     // ; Filter for Alarm EtherType:0x8892
#define EDDP_API_TYPE_ALARM_SIZE 0x8

// ********************************************************************************
// **** Code Fragment 07 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_LEN 0x4B0                       // ; Filter for LEN EtherType: <0x0800
#define EDDP_API_TYPE_LEN_SIZE 0xC0

// ********************************************************************************
// **** Code Fragment 08 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_PTCP 0x570                      // ; Filter for PTPC EtherType:0x8892
#define EDDP_API_TYPE_PTCP_SIZE 0x88

// ********************************************************************************
// **** Code Fragment 14 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_RT_CT 0x5F8                     // ; Filter for RT EtherType:0x8892
#define EDDP_API_TYPE_RT_CT_SIZE 0x8

// ********************************************************************************
// **** Code Fragment 15 **********************************************************
// ********************************************************************************
#define EDDP_API_TYPE_RT_SF 0x600                     // ; Filter for RT EtherType:0x8892
#define EDDP_API_TYPE_RT_SF_SIZE 0x8

// ********************************************************************************
// ********************************************************************************
// ********************************************************************************

// *** SW Version for this ASM file ***********************************************
#define EDDP_HW_FILTER_VER 0x608                      // ; version string null terminated
#define EDDP_HW_FILTER_VER_SIZE 0x8                   // ; max. version data count = 64 bit !!!


// ********************************************************************************


#define EDDP_HWFC_SIZE 1552
LSA_EXTERN LSA_UINT8 eddp_hwfiltercode[1552];


/*===========================================================================*/
/*                                  types                                    */
/*===========================================================================*/

/*===========================================================================*/
/*                                  macros                                   */
/*===========================================================================*/


/*****************************************************************************/
/*  end of file eddp_hwf.h                                                   */
/*****************************************************************************/

#ifdef __cplusplus  /* If C++ - compiler: End of C linkage */
}
#endif

/*---------------------------------------------------------------------------*/
#endif  /* of eddp_hwf_H */
